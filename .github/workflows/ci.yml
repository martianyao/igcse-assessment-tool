name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  quality-gates:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11, 3.12]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install ruff pytest pytest-cov pytest-xdist black isort mypy

    - name: Code formatting check (Black)
      run: |
        black --check --diff src/ tests/ *.py

    - name: Import sorting check (isort)
      run: |
        isort --check-only --diff src/ tests/ *.py

    - name: Lint with Ruff
      run: |
        ruff check . --output-format=github

    - name: Type checking with MyPy
      run: |
        mypy src/ --ignore-missing-imports --show-error-codes

    - name: Security check with Bandit
      run: |
        pip install bandit
        bandit -r src/ -f json -o bandit-report.json || true

    - name: Run tests with coverage
      run: |
        pytest --cov=src --cov-report=xml --cov-report=html --cov-report=term-missing -n auto

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Generate coverage badge
      run: |
        pip install coverage-badge
        coverage-badge -o coverage.svg

    - name: Upload coverage badge
      uses: actions/upload-artifact@v3
      with:
        name: coverage-badge
        path: coverage.svg

  integration-tests:
    runs-on: ubuntu-latest
    needs: quality-gates
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-flask

    - name: Run integration tests
      run: |
        python -m pytest tests/integration/ -v

    - name: Test web application startup
      run: |
        timeout 30s python app.py &
        sleep 10
        curl -f http://localhost:5000 || exit 1

  documentation:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install documentation dependencies
      run: |
        pip install sphinx sphinx-rtd-theme myst-parser

    - name: Build documentation
      run: |
        cd docs
        sphinx-quickstart -q --project "IGCSE Assessment Tool" --author "Development Team" --release "1.0" --language "en" --ext-autodoc --ext-viewcode --makefile --no-batchfile .
        make html

    - name: Deploy documentation
      if: github.ref == 'refs/heads/main'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs/_build/html

  performance-tests:
    runs-on: ubuntu-latest
    needs: quality-gates
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install locust

    - name: Run performance tests
      run: |
        # Start app in background
        python app.py &
        sleep 10
        
        # Run load tests
        locust -f tests/performance/locustfile.py --headless -u 10 -r 2 -t 30s --host=http://localhost:5000

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [quality-gates, integration-tests]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your deployment commands here
        # e.g., deploy to Heroku, Railway, etc.

  deploy-production:
    runs-on: ubuntu-latest
    needs: [quality-gates, integration-tests, performance-tests]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your deployment commands here
        # e.g., deploy to production server